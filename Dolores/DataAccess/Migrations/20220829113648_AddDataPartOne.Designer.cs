// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(DoloresContext))]
    [Migration("20220829113648_AddDataPartOne")]
    partial class AddDataPartOne
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Armani"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Gucci"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Creed"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Dior"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Versace"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Tom Ford"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Dolce&Gabbana"
                        });
                });

            modelBuilder.Entity("Domain.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExecutionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAuthorized")
                        .HasColumnType("bit");

                    b.Property<string>("UseCaseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Domain.MeasurementUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Unit")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Unit")
                        .IsUnique()
                        .HasFilter("[Unit] IS NOT NULL");

                    b.ToTable("MeasurementUnits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Unit = "ml"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Unit = "dl"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Unit = "cl"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Unit = "oz."
                        });
                });

            modelBuilder.Entity("Domain.MoneyCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MoneyCurrencies");
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ConfirmedPurchase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Created");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Orderline", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PricelistId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PricelistId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PricelistId");

                    b.ToTable("Orderlines");
                });

            modelBuilder.Entity("Domain.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Domain.Perfume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Perfumes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Tobacco Vanille"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Soleil Neige"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Noir Extreme"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Light Blue Pour Homme"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "The one"
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Beauty Dolce Garden"
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "K by Dolce&Gabbana"
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Bright Crystal"
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Eros"
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Crystal Noir"
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Miss Dior Blooming Bouquet"
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Sauvage"
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "J'adore"
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Homme"
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Aventus"
                        },
                        new
                        {
                            Id = 16,
                            BrandId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Love In White"
                        },
                        new
                        {
                            Id = 17,
                            BrandId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Viking"
                        },
                        new
                        {
                            Id = 18,
                            BrandId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Royal Princess Oud"
                        },
                        new
                        {
                            Id = 19,
                            BrandId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Virgin Island Water"
                        },
                        new
                        {
                            Id = 20,
                            BrandId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Love In Black"
                        },
                        new
                        {
                            Id = 21,
                            BrandId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Guilty"
                        },
                        new
                        {
                            Id = 22,
                            BrandId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Bloom"
                        },
                        new
                        {
                            Id = 23,
                            BrandId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Tears From The Moon"
                        },
                        new
                        {
                            Id = 24,
                            BrandId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "My Way"
                        },
                        new
                        {
                            Id = 25,
                            BrandId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Armani Prive Bleu Lazuli"
                        },
                        new
                        {
                            Id = 26,
                            BrandId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Armani Code"
                        });
                });

            modelBuilder.Entity("Domain.PerfumeSizes", b =>
                {
                    b.Property<int>("PerfumeId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PricelistPerfumeSizeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PerfumeId", "SizeId");

                    b.HasIndex("PricelistPerfumeSizeId")
                        .IsUnique()
                        .HasFilter("[PricelistPerfumeSizeId] IS NOT NULL");

                    b.HasIndex("SizeId");

                    b.ToTable("PerfumeSizes");

                    b.HasData(
                        new
                        {
                            PerfumeId = 1,
                            SizeId = 1,
                            Quantity = 10
                        },
                        new
                        {
                            PerfumeId = 1,
                            SizeId = 2,
                            Quantity = 5
                        },
                        new
                        {
                            PerfumeId = 1,
                            SizeId = 3,
                            Quantity = 3
                        },
                        new
                        {
                            PerfumeId = 2,
                            SizeId = 1,
                            Quantity = 7
                        },
                        new
                        {
                            PerfumeId = 2,
                            SizeId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            PerfumeId = 2,
                            SizeId = 3,
                            Quantity = 5
                        },
                        new
                        {
                            PerfumeId = 3,
                            SizeId = 1,
                            Quantity = 7
                        },
                        new
                        {
                            PerfumeId = 3,
                            SizeId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            PerfumeId = 3,
                            SizeId = 2,
                            Quantity = 5
                        },
                        new
                        {
                            PerfumeId = 4,
                            SizeId = 3,
                            Quantity = 7
                        },
                        new
                        {
                            PerfumeId = 4,
                            SizeId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            PerfumeId = 4,
                            SizeId = 2,
                            Quantity = 5
                        },
                        new
                        {
                            PerfumeId = 5,
                            SizeId = 3,
                            Quantity = 7
                        },
                        new
                        {
                            PerfumeId = 5,
                            SizeId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            PerfumeId = 5,
                            SizeId = 2,
                            Quantity = 5
                        },
                        new
                        {
                            PerfumeId = 6,
                            SizeId = 3,
                            Quantity = 7
                        },
                        new
                        {
                            PerfumeId = 6,
                            SizeId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            PerfumeId = 6,
                            SizeId = 2,
                            Quantity = 5
                        },
                        new
                        {
                            PerfumeId = 7,
                            SizeId = 3,
                            Quantity = 7
                        },
                        new
                        {
                            PerfumeId = 7,
                            SizeId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            PerfumeId = 7,
                            SizeId = 2,
                            Quantity = 5
                        },
                        new
                        {
                            PerfumeId = 8,
                            SizeId = 3,
                            Quantity = 7
                        },
                        new
                        {
                            PerfumeId = 8,
                            SizeId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            PerfumeId = 8,
                            SizeId = 2,
                            Quantity = 5
                        },
                        new
                        {
                            PerfumeId = 9,
                            SizeId = 3,
                            Quantity = 0
                        },
                        new
                        {
                            PerfumeId = 9,
                            SizeId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            PerfumeId = 9,
                            SizeId = 2,
                            Quantity = 5
                        },
                        new
                        {
                            PerfumeId = 10,
                            SizeId = 2,
                            Quantity = 0
                        },
                        new
                        {
                            PerfumeId = 10,
                            SizeId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            PerfumeId = 10,
                            SizeId = 1,
                            Quantity = 5
                        },
                        new
                        {
                            PerfumeId = 11,
                            SizeId = 2,
                            Quantity = 0
                        },
                        new
                        {
                            PerfumeId = 11,
                            SizeId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            PerfumeId = 11,
                            SizeId = 1,
                            Quantity = 5
                        },
                        new
                        {
                            PerfumeId = 12,
                            SizeId = 2,
                            Quantity = 15
                        },
                        new
                        {
                            PerfumeId = 12,
                            SizeId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            PerfumeId = 12,
                            SizeId = 1,
                            Quantity = 5
                        },
                        new
                        {
                            PerfumeId = 13,
                            SizeId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            PerfumeId = 13,
                            SizeId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            PerfumeId = 13,
                            SizeId = 1,
                            Quantity = 5
                        },
                        new
                        {
                            PerfumeId = 14,
                            SizeId = 2,
                            Quantity = 4
                        },
                        new
                        {
                            PerfumeId = 14,
                            SizeId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            PerfumeId = 14,
                            SizeId = 1,
                            Quantity = 5
                        },
                        new
                        {
                            PerfumeId = 15,
                            SizeId = 2,
                            Quantity = 4
                        },
                        new
                        {
                            PerfumeId = 15,
                            SizeId = 3,
                            Quantity = 20
                        },
                        new
                        {
                            PerfumeId = 15,
                            SizeId = 1,
                            Quantity = 5
                        },
                        new
                        {
                            PerfumeId = 16,
                            SizeId = 2,
                            Quantity = 4
                        },
                        new
                        {
                            PerfumeId = 16,
                            SizeId = 3,
                            Quantity = 2
                        },
                        new
                        {
                            PerfumeId = 16,
                            SizeId = 1,
                            Quantity = 5
                        },
                        new
                        {
                            PerfumeId = 17,
                            SizeId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            PerfumeId = 17,
                            SizeId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            PerfumeId = 17,
                            SizeId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            PerfumeId = 18,
                            SizeId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            PerfumeId = 18,
                            SizeId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            PerfumeId = 18,
                            SizeId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            PerfumeId = 19,
                            SizeId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            PerfumeId = 19,
                            SizeId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            PerfumeId = 19,
                            SizeId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            PerfumeId = 20,
                            SizeId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            PerfumeId = 20,
                            SizeId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            PerfumeId = 20,
                            SizeId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            PerfumeId = 21,
                            SizeId = 3,
                            Quantity = 11
                        },
                        new
                        {
                            PerfumeId = 21,
                            SizeId = 2,
                            Quantity = 3
                        },
                        new
                        {
                            PerfumeId = 21,
                            SizeId = 1,
                            Quantity = 7
                        },
                        new
                        {
                            PerfumeId = 22,
                            SizeId = 3,
                            Quantity = 7
                        },
                        new
                        {
                            PerfumeId = 22,
                            SizeId = 2,
                            Quantity = 3
                        },
                        new
                        {
                            PerfumeId = 22,
                            SizeId = 1,
                            Quantity = 7
                        },
                        new
                        {
                            PerfumeId = 23,
                            SizeId = 3,
                            Quantity = 7
                        },
                        new
                        {
                            PerfumeId = 23,
                            SizeId = 2,
                            Quantity = 3
                        },
                        new
                        {
                            PerfumeId = 23,
                            SizeId = 1,
                            Quantity = 7
                        },
                        new
                        {
                            PerfumeId = 24,
                            SizeId = 3,
                            Quantity = 7
                        },
                        new
                        {
                            PerfumeId = 24,
                            SizeId = 2,
                            Quantity = 5
                        },
                        new
                        {
                            PerfumeId = 24,
                            SizeId = 1,
                            Quantity = 7
                        },
                        new
                        {
                            PerfumeId = 25,
                            SizeId = 3,
                            Quantity = 25
                        },
                        new
                        {
                            PerfumeId = 25,
                            SizeId = 2,
                            Quantity = 11
                        },
                        new
                        {
                            PerfumeId = 25,
                            SizeId = 1,
                            Quantity = 14
                        },
                        new
                        {
                            PerfumeId = 26,
                            SizeId = 3,
                            Quantity = 25
                        },
                        new
                        {
                            PerfumeId = 26,
                            SizeId = 2,
                            Quantity = 11
                        },
                        new
                        {
                            PerfumeId = 26,
                            SizeId = 1,
                            Quantity = 14
                        });
                });

            modelBuilder.Entity("Domain.Pricelist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DiscountInPercent")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("PerfumeSizeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PerfumeSizeId")
                        .IsUnique();

                    b.ToTable("Pricelists");
                });

            modelBuilder.Entity("Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Authorized"
                        });
                });

            modelBuilder.Entity("Domain.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<double>("PerfumeSize")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            MeasurementUnitId = 1,
                            PerfumeSize = 30.0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            MeasurementUnitId = 1,
                            PerfumeSize = 50.0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            MeasurementUnitId = 1,
                            PerfumeSize = 100.0
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            MeasurementUnitId = 4,
                            PerfumeSize = 1.7
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            MeasurementUnitId = 4,
                            PerfumeSize = 3.3799999999999999
                        });
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.UserUseCase", b =>
                {
                    b.Property<int>("UseCaseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UseCaseId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserUseCases");
                });

            modelBuilder.Entity("Domain.Log", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.HasOne("Domain.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Domain.Orderline", b =>
                {
                    b.HasOne("Domain.Order", "Order")
                        .WithMany("Orderlines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Pricelist", "Pricelist")
                        .WithMany("Orderlines")
                        .HasForeignKey("PricelistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany("Orderlines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Pricelist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Perfume", b =>
                {
                    b.HasOne("Domain.Brand", "Brand")
                        .WithMany("Perfumes")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Domain.PerfumeSizes", b =>
                {
                    b.HasOne("Domain.Perfume", "Perfume")
                        .WithMany("Sizes")
                        .HasForeignKey("PerfumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Pricelist", "Pricelist")
                        .WithOne("PerfumeSize")
                        .HasForeignKey("Domain.PerfumeSizes", "PricelistPerfumeSizeId")
                        .HasPrincipalKey("Domain.Pricelist", "PerfumeSizeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Size", "Size")
                        .WithMany("Perfumes")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Perfume");

                    b.Navigation("Pricelist");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Domain.Pricelist", b =>
                {
                    b.HasOne("Domain.MoneyCurrency", "MoneyCurrency")
                        .WithMany("Pricelist")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MoneyCurrency");
                });

            modelBuilder.Entity("Domain.Size", b =>
                {
                    b.HasOne("Domain.MeasurementUnit", "MeasurementUnit")
                        .WithMany("Sizes")
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementUnit");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.HasOne("Domain.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.UserUseCase", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithMany("UseCases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Brand", b =>
                {
                    b.Navigation("Perfumes");
                });

            modelBuilder.Entity("Domain.MeasurementUnit", b =>
                {
                    b.Navigation("Sizes");
                });

            modelBuilder.Entity("Domain.MoneyCurrency", b =>
                {
                    b.Navigation("Pricelist");
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.Navigation("Orderlines");
                });

            modelBuilder.Entity("Domain.PaymentMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Perfume", b =>
                {
                    b.Navigation("Sizes");
                });

            modelBuilder.Entity("Domain.Pricelist", b =>
                {
                    b.Navigation("Orderlines");

                    b.Navigation("PerfumeSize");
                });

            modelBuilder.Entity("Domain.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Size", b =>
                {
                    b.Navigation("Perfumes");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Orderlines");

                    b.Navigation("UseCases");
                });
#pragma warning restore 612, 618
        }
    }
}
